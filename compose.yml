services:
  postgres:
    # DNS resolves to this container name NOT the image or `container_name`
    image: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ocr_db # Database name
      POSTGRES_USER: admin
      # POSTGRES image as specific implementation to read the password from the file
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  migrations:
    build:
      context: .
      dockerfile: Ocr.Data.Migrations/Dockerfile.Migrations
    depends_on:
      - postgres
    secrets:
      - POSTGRES_PASSWORD
    environment: 
      POSTGRES_USER: admin
      POSTGRES_DB: ocr_db
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  api:
    build:
      context: .
      dockerfile: Dockerfile # Path to the Dockerfile which will be used to build the images
    depends_on:
      - postgres # Will force the postgres container to start before this one
      - migrations
    ports:
      - "8080:8080"
    volumes:
      - ./ocr_storage:/var/lib/ocr_storage
    secrets:
        - DI_KEY
        - DI_ENDPOINT
        - POSTGRES_PASSWORD
    environment:
      DI_KEY: DI_KEY
      DI_ENDPOINT: DI_ENDPOINT
      POSTGRES_PASSWORD: POSTGRES_PASSWORD
      OCR_STORAGE_PATH: /var/lib/ocr_storage
 

secrets:
  DI_KEY:
      file: ./secrets/DI_KEY.txt
  DI_ENDPOINT:
      file: ./secrets/DI_ENDPOINT.txt
  POSTGRES_PASSWORD:
    file: ./secrets/POSTGRES_PASSWORD.txt
volumes:
  pg_data:
  ocr_storage:
