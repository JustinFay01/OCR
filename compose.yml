services:
  postgres:
    # DNS resolves to this container name NOT the image or `container_name`
    image: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ocr_db # Database name
      POSTGRES_USER: admin
      # POSTGRES image as specific implementation to read the password from the file
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ocr_db -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 5
  migrations:
    build:
      context: .
      dockerfile: Ocr.Data.Migrations/Dockerfile.Migrations
    depends_on:
      postgres:
        condition: service_healthy
    environment: 
      POSTGRES_USER: admin
      POSTGRES_DB: ocr_db
      POSTGRES_PASSWORD: admin
  api:
    build:
      context: .
      dockerfile: Dockerfile # Path to the Dockerfile which will be used to build the images
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    volumes:
      - ./ocr_storage:/var/lib/ocr_storage
    environment:
      DI_KEY: ${DI_KEY}
      DI_ENDPOINT: ${DI_ENDPOINT}
      POSTGRES_PASSWORD: admin
      OCR_STORAGE_PATH: /var/lib/ocr_storage

volumes:
  pg_data:
  ocr_storage:
